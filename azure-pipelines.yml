# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    #Python27:
    #  python.version: '2.7'
    #Python35:
    #  python.version: '3.5'
    #Python36:
    #  python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'UsePythonVersion $(python.version)'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/command-line?view=azure-devops&tabs=yaml
- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'CmdLine - Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'CmdLine - install pytest'

- script:
    python test-main.py
  displayName: 'CmdLine - python test-main.py'

- script: |
    pip3 install pyyaml
    echo '##vso[task.setvariable variable=projectRoot]$(System.DefaultWorkingDirectory)'
  displayName: 'CmdLine - Install pyyaml'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml
- script:
    echo $(projectRoot)
    pushd '$(projectRoot)'
    ./test-main.sh
  condition: succeededOrFailed()
  displayName: 'CmdLine - ./test-main.sh'

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/bash?view=azure-devops
- task: Bash@3
  inputs:
    targetType: inline
    script: echo $PWD; echo $(System.DefaultWorkingDirectory); echo $(Build.SourcesDirectory); ls -l
  displayName: 'Bash script inline commands'
- task: Bash@3
  inputs:
   targetType: filePath
   filePath: test-main.sh
  displayName: 'Bash script filePath'

# The Bash task also has a shortcut syntax in YAML:
- bash:
    pushd '$(projectRoot)'
    chmod +x ./test-main.sh
  displayName: 'Bash - chmod +x ./test-main.sh'

- task: PythonScript@0
  displayName: 'PythonScript - regression test'
  inputs:
   scriptSource: inline
   script: |
       """Performs regression test"""
       from os import path
       from glob import glob
       import sys
       #
       # processing code here
       #
       if not True:
           raise sys.exit("an error occurrred")
